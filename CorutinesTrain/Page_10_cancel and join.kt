package corutines

import kotlinx.coroutines.*
import kotlin.random.Random
import kotlin.random.nextInt

/* Закрыть и отменить корутину очень просто. Отменяетость корутины, обеспечивают функции delay() или yield().
Эти функции являются маркерами для программы. Что бы прервать и закрыть корутину нужно обратиться к её Job
и вызвать метод cancel() и после этого метод join() (если вычисления внутри корутины выполнены -
это происходит автоматически). Можно так же воспользоваться методом cancelAndJoin() - это то же самое.*/

/*Простейший пример. У нас есть корутина которая копирует файлы и каждую секунду сообщает о прогрессе. Мы хотим отменить
ее работу через несколько секунд.*/

suspend fun main() {

    coroutineScope {

        // запускаем в корутине функцию копирования
        val job = launch {
            copy()
        }

        // через несколько секунд
        delay(Random.nextInt(2000..5000).toLong())
        // прерываем выполнение корутины
        job.cancel()
        // дожидаемся ее завершения (не в смысле вычисления кода в ней, а завершения самой корутины)
        job.join()
        // можно также было написать вот так job.cancelAndJoin()
        println("Копирование было отменено")
    }

    println("Программа завершена")

}

suspend fun copy() {
    for (i in 1..100) {
        println("скопировано файлов: $i")
        delay(1000)
    }
}
